{"version":3,"sources":["components/KeyboardButton.js","components/Calculator.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["KeyboardButton","idAndClass","value","handleNumber","handleOperation","handleResult","handleClear","keyType","type","id","className","onClick","Calculator","useState","total","setTotal","sequence","setSequence","controlEqual","setControlEqual","eval","error","e","length","target","toString","includes","symbols","i","text","slice","Display","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6a04b6cf.chunk.js","sourcesContent":["import React from 'react'\nimport './keyboardButton.css'\n\nconst KeyboardButton = (\n    {\n        idAndClass, \n        value, \n        handleNumber, \n        handleOperation, \n        handleResult, \n        handleClear,\n        keyType\n    }) =>{\n\n    return(\n        <input \n            type=\"button\" \n            id={idAndClass} \n            className={`keys ${idAndClass} ${keyType}`} \n            value={value}\n            onClick={handleNumber || handleOperation || handleResult || handleClear }\n        />\n    )\n}\n\nexport default KeyboardButton","import React, {useState} from 'react'\nimport KeyboardButton from './KeyboardButton'\nimport Display from './Display'\nimport './keyboard-grid.css'\n\nconst Calculator = () =>{\n\n    const [total, setTotal] = useState(0)\n    const [sequence, setSequence] = useState(\"0\")\n    const [controlEqual, setControlEqual] = useState(false)\n\n    const handleResult = () =>{\n\n        try {\n\n            setTotal(eval(sequence))  //eval, change the string for a mathematical expression  \n            setSequence(sequence + \"=\" + eval(sequence)) \n            setControlEqual(true)\n            \n        } catch (error) {\n            setSequence('ERROR')\n        }\n\n    }    \n\n    const handleClear = () =>{     \n\n        setTotal(0)\n        setSequence(\"0\")\n        setControlEqual(false)          \n    }\n\n    const handleNumber = e =>{  \n\n        if(total[total.length-1] === \".\" && e.target.value ===\".\"){\n            return;\n        }\n        \n        if(total.toString().includes(\".\")  && e.target.value ===\".\"){\n            return;\n        }\n\n        if(total === 0 && sequence === \"0\"){\n\n            if(e.target.value === \"0\"){\n\n                return;\n\n            }else if(e.target.value === '.'){\n\n                setTotal(total + e.target.value)\n                setSequence(sequence + e.target.value) \n\n            }else{\n\n                setTotal(e.target.value)\n                setSequence(e.target.value)\n            }\n        }else{\n\n            setTotal(total + e.target.value)\n            setSequence(sequence + e.target.value)             \n        }\n\n        setControlEqual(false)\n    }\n\n    const handleOperation = e =>{         \n\n        const symbols = ['*', '/', '-', '+']\n\n        if(controlEqual){\n            \n            setSequence(total + e.target.value)\n\n        }else{\n\n            setTotal(e.target.value)\n\n            if(symbols.includes(sequence[sequence.length-1]) && e.target.value === '-'){\n\n                setSequence(sequence + e.target.value)\n\n            }else if(symbols.includes(sequence[sequence.length-1]) && symbols.includes(e.target.value)){\n            \n                let i = sequence.length-1\n                let text = sequence\n\n                while(symbols.includes(text[i])){\n\n                    text=text.slice(0, -1)\n                    i--\n                }   \n\n                setSequence(text + e.target.value)    \n\n            }else{\n\n                setSequence(sequence + e.target.value)                \n            }\n            \n        }\n        setControlEqual(false)    \n    }\n\n    return(\n        <div className=\"grid-container\">  \n            <Display \n                idAndClass={'display'} \n                total={total}\n                sequence={sequence}                \n            />\n            <KeyboardButton \n                value={'AC'} \n                idAndClass={'clear'}\n                keyType={'clear'}\n                handleClear={handleClear}\n            />\n            <KeyboardButton \n                value={'/'} \n                idAndClass={'divide'}\n                keyType={'operator'}\n                handleOperation={handleOperation}  \n            />\n            <KeyboardButton \n                value={'*'} \n                idAndClass={'multiply'}\n                keyType={'operator'}\n                handleOperation={handleOperation}\n            />\n            <KeyboardButton \n                value={7} \n                idAndClass={'seven'}\n                handleNumber={handleNumber}                \n            />\n            <KeyboardButton \n                value={8} \n                idAndClass={'eight'}\n                handleNumber={handleNumber}\n            />\n            <KeyboardButton \n                value={9}\n                idAndClass={'nine'}\n                handleNumber={handleNumber}   \n            />\n            <KeyboardButton \n                value={'-'} \n                idAndClass={'subtract'}\n                keyType={'operator'}\n                handleOperation={handleOperation}      \n            />\n            <KeyboardButton \n                value={4} \n                idAndClass={'four'}\n                handleNumber={handleNumber}   \n            />\n            <KeyboardButton \n                value={5} \n                idAndClass={'five'}\n                handleNumber={handleNumber}   \n            />\n            <KeyboardButton \n                value={6} \n                idAndClass={'six'}\n                handleNumber={handleNumber}   \n            />\n            <KeyboardButton \n                value={'+'} \n                idAndClass={'add'}\n                keyType={'operator'}\n                handleOperation={handleOperation}  \n            />\n            <KeyboardButton \n                value={1} \n                idAndClass={'one'}\n                handleNumber={handleNumber}   \n            />\n            <KeyboardButton \n                value={2} \n                idAndClass={'two'}\n                handleNumber={handleNumber}   \n            />\n            <KeyboardButton \n                value={3} \n                idAndClass={'three'}\n                handleNumber={handleNumber}   \n            />\n            <KeyboardButton \n                value={0} \n                idAndClass={'zero'}\n                handleNumber={handleNumber} \n            />\n            <KeyboardButton \n                value={'.'} \n                idAndClass={'decimal'}\n                handleNumber={handleNumber}   \n            />\n            <KeyboardButton \n                value={'='} \n                idAndClass={'equals'}\n                keyType={'operator'}\n                handleResult={handleResult}\n            />\n        </div>\n    )\n}\n\nexport default Calculator","import React from 'react'\nimport './display.css'\n\nconst Display = ({idAndClass, total, sequence }) =>{\n\n    return(\n        <div className={`display ${idAndClass}`}>\n            <p>{sequence}</p>\n            <p id={idAndClass}>{total}</p>\n        </div>\n    )\n}\n\nexport default Display","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n        <h1 className=\"header\"> React Calculator</h1>\n        <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}